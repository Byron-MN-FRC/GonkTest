// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Constants;
import frc.robot.commands.DriveWithJoystick;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX rightMaster;
private WPI_TalonFX rightFollower;
private SpeedControllerGroup rightSpeedControllerGroup;
private WPI_TalonFX leftMaster;
private WPI_TalonFX leftFollower;
private SpeedControllerGroup leftSpeedControllerGroup;
private DifferentialDrive tankDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
rightMaster = new WPI_TalonFX(1);


        
rightFollower = new WPI_TalonFX(0);


        
rightSpeedControllerGroup = new SpeedControllerGroup(rightMaster, rightFollower  );
addChild("RightSpeedControllerGroup",rightSpeedControllerGroup);

        
leftMaster = new WPI_TalonFX(3);


        
leftFollower = new WPI_TalonFX(2);


        
leftSpeedControllerGroup = new SpeedControllerGroup(leftMaster, leftFollower  );
addChild("LeftSpeedControllerGroup",leftSpeedControllerGroup);

        
tankDrive = new DifferentialDrive(leftSpeedControllerGroup, rightSpeedControllerGroup);
addChild("TankDrive",tankDrive);
tankDrive.setSafetyEnabled(true);
tankDrive.setExpiration(0.1);
tankDrive.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        motorConfig();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("Left encoder", leftMaster.getSelectedSensorPosition());
        SmartDashboard.putNumber("Right encoder", rightMaster.getSelectedSensorPosition());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    double limitedJoystick = 0;
    private double y = 0;
	private double twist = 0;


    public void driveforward(Joystick joystickP0) {
		y = -joystickP0.getY();
        twist = joystickP0.getTwist();
       // double change = y - limitedJoystick; 
       // if (change > 0.01) {change = 0.01;}
        //else if (change < -0.01) {change = -0.01;}
        //limitedJoystick += change;
        tankDrive.arcadeDrive(y, twist);    
     }
   

    

    private void motorConfig() {
        /* Factory default hardware to prevent unexpected behavior */
        leftMaster.configFactoryDefault();
        leftFollower.configFactoryDefault();
        rightMaster.configFactoryDefault();
        rightFollower.configFactoryDefault();

        /* Setup followers */
        leftFollower.set(ControlMode.Follower, leftMaster.getDeviceID());
        rightFollower.set(ControlMode.Follower, rightMaster.getDeviceID());
  //      leftFollower.follow(leftMaster);
  //      rightFollower.follow(rightMaster);
        /* Invert right side */
        rightMaster.setInverted(true);
        rightFollower.setInverted(true);
    
        leftMaster.configSelectedFeedbackSensor(FeedbackDevice.IntegratedSensor, Constants.kPIDLoopIdx, Constants.kTimeoutMs); // Select Sensor (Encoder)
        rightMaster.configSelectedFeedbackSensor(FeedbackDevice.IntegratedSensor, Constants.kPIDLoopIdx, Constants.kTimeoutMs); // Select Sensor (Encoder)
     
        /* Set relevant frame periods to be at least as fast as periodic rate */
        leftMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, Constants.kTimeoutMs);
        leftMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, Constants.kTimeoutMs);
        rightMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, Constants.kTimeoutMs);
        rightMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, Constants.kTimeoutMs);
   
        /* Set the peak and nominal outputs */
        leftMaster.configNominalOutputForward(0, Constants.kTimeoutMs);
        leftMaster.configNominalOutputReverse(0, Constants.kTimeoutMs);
        leftMaster.configPeakOutputForward(1, Constants.kTimeoutMs);
        leftMaster.configPeakOutputReverse(-1, Constants.kTimeoutMs);
        rightMaster.configNominalOutputForward(0, Constants.kTimeoutMs);
        rightMaster.configNominalOutputReverse(0, Constants.kTimeoutMs);
        rightMaster.configPeakOutputForward(1, Constants.kTimeoutMs);
        rightMaster.configPeakOutputReverse(-1, Constants.kTimeoutMs);
      
        /* Set Motion Magic gains in slot0 - see documentation */
        leftMaster.selectProfileSlot(Constants.kSlotIdx, Constants.kPIDLoopIdx);
        leftMaster.config_kF(Constants.kSlotIdx, Constants.kGains.kF, Constants.kTimeoutMs);
        leftMaster.config_kP(Constants.kSlotIdx, Constants.kGains.kP, Constants.kTimeoutMs);
        leftMaster.config_kI(Constants.kSlotIdx, Constants.kGains.kI, Constants.kTimeoutMs);
        leftMaster.config_kD(Constants.kSlotIdx, Constants.kGains.kD, Constants.kTimeoutMs);
        rightMaster.selectProfileSlot(Constants.kSlotIdx, Constants.kPIDLoopIdx);
        rightMaster.config_kF(Constants.kSlotIdx, Constants.kGains.kF, Constants.kTimeoutMs);
        rightMaster.config_kP(Constants.kSlotIdx, Constants.kGains.kP, Constants.kTimeoutMs);
        rightMaster.config_kI(Constants.kSlotIdx, Constants.kGains.kI, Constants.kTimeoutMs);
        rightMaster.config_kD(Constants.kSlotIdx, Constants.kGains.kD, Constants.kTimeoutMs);
        
        /* Set acceleration and vcruise velocity - see documentation */
        leftMaster.configMotionCruiseVelocity(15000, Constants.kTimeoutMs);
        leftMaster.configMotionAcceleration(6000, Constants.kTimeoutMs);
        rightMaster.configMotionCruiseVelocity(15000, Constants.kTimeoutMs);
        rightMaster.configMotionAcceleration(6000, Constants.kTimeoutMs);

        /* Set sensor position to 0 */
        leftMaster.setSelectedSensorPosition(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
        rightMaster.setSelectedSensorPosition(0,  Constants.kPIDLoopIdx, Constants.kTimeoutMs);

        /* WPI drivetrain classes assume by default left & right are opposite */
        /* - call this to apply + to both sides when moving forward           */
        tankDrive.setRightSideInverted(false);
    }

    public void driveToEncoderUnits(double encoderUnits) {
    // double encoderUnits = Constants.catapultVariables.get(target)[4];
           leftMaster.set(ControlMode.MotionMagic, encoderUnits);
           leftFollower.follow(leftMaster); 
           rightMaster.set(ControlMode.MotionMagic, encoderUnits);
           rightFollower.follow(rightMaster);
    }
    public boolean atTarget(double encoderUnits) {
        double leftCurrentEncoderUnits = leftMaster.getSelectedSensorPosition(Constants.kPIDLoopIdx);
        double rightCurrentEncoderUnits = rightMaster.getSelectedSensorPosition(Constants.kPIDLoopIdx);
        double remainingLeft = Math.abs(leftCurrentEncoderUnits - encoderUnits);
        double remainingRight = Math.abs(rightCurrentEncoderUnits - encoderUnits);
        System.out.println("leftCurrentEncoderUnits="+leftCurrentEncoderUnits);
        System.out.println("remainingLeftCurrentEncoderUnits="+leftCurrentEncoderUnits);
        System.out.println("rightCurrentEncoderUnits="+remainingLeft);
         System.out.println("remainingRightCurrentEncoderUnits="+remainingRight);
        if ((remainingRight < 1000) && (remainingLeft < 1000)) {
            System.out.println("true");
            return true;
        }
        return false;   
    }
}
