// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import com.ctre.phoenix.motorcontrol.can.TalonFX;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import frc.robot.commands.DriveWithJoystick;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX rightMaster;
private WPI_TalonFX rightFollower;
private SpeedControllerGroup rightSpeedControllerGroup;
private WPI_TalonFX leftMaster;
private WPI_TalonFX leftFollower;
private SpeedControllerGroup leftSpeedControllerGroup;
private DifferentialDrive tankDrive;
TalonFX frontLeft,frontRight,rearLeft,rearRight;
	SpeedControllerGroup leftDrive,rightDrive;
	public static DifferentialDrive drive;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrain() {
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
rightMaster = new WPI_TalonFX(15);


        
rightFollower = new WPI_TalonFX(14);


        
rightSpeedControllerGroup = new SpeedControllerGroup(rightMaster, rightFollower  );
addChild("RightSpeedControllerGroup",rightSpeedControllerGroup);

        
leftMaster = new WPI_TalonFX(0);


        
leftFollower = new WPI_TalonFX(1);


        
leftSpeedControllerGroup = new SpeedControllerGroup(leftMaster, leftFollower  );
addChild("LeftSpeedControllerGroup",leftSpeedControllerGroup);

        
tankDrive = new DifferentialDrive(leftSpeedControllerGroup, rightSpeedControllerGroup);
addChild("TankDrive",tankDrive);
tankDrive.setSafetyEnabled(true);
tankDrive.setExpiration(0.1);
tankDrive.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
   
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    double limitedJoystick = 0;
    private double y = 0;
	private double twist = 0;


    public void driveforward(Joystick joystickP0) {
		y = -joystickP0.getY();
        twist = joystickP0.getTwist();
        if (y > 0.2) y = 0.2;
        if (y < -0.2) y = -0.2;
       // double change = y - limitedJoystick; 
       // if (change > 0.01) {change = 0.01;}
        //else if (change < -0.01) {change = -0.01;}
        //limitedJoystick += change;
        tankDrive.arcadeDrive(y, twist);
        if (twist > 0.2) twist = 0.2;
        if (twist < -0.2) twist = -0.2;
    }
    

    private void motorConfig() {
        //DriveTrain.setInvertedMotor(,true);
        //rightFollower.setinverted(true);
	    // Set followers
	    //leftfollower.set(ControlMode.Follower, RobotMap.talonIDLeftMaster);
        //rightfollower.set(ControlMode.Follower, RobotMap.talonIDRightMaster);
    }

}
